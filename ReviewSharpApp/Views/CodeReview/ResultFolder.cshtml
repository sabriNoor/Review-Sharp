@using System.Text.Json
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link rel="stylesheet" href="~/css/site-custom.css" />

<div class="d-flex justify-content-start my-3">
    <button id="darkModeToggle" class="dark-toggle-btn" aria-pressed="false" type="button">üåô Dark Mode</button>
</div>
<script>
    const toggle = document.getElementById('darkModeToggle');
    function updateToggleState() {
        if (document.body.classList.contains('dark-mode')) {
            toggle.innerHTML = '‚òÄÔ∏è Light Mode';
            toggle.setAttribute('aria-pressed', 'true');
        } else {
            toggle.innerHTML = 'üåô Dark Mode';
            toggle.setAttribute('aria-pressed', 'false');
        }
    }
    toggle.addEventListener('click', () => {
        document.body.classList.toggle('dark-mode');
        if (document.body.classList.contains('dark-mode')) {
            localStorage.setItem('darkMode', 'on');
        } else {
            localStorage.setItem('darkMode', 'off');
        }
        updateToggleState();
    });
    // On load, set dark mode from localStorage
    if (localStorage.getItem('darkMode') === 'on') {
        document.body.classList.add('dark-mode');
    }
    updateToggleState();
</script>
@functions {
    string GetFileCode(string fileName, Dictionary<string, string> fileCodes)
    {
        if (fileCodes != null && fileCodes.ContainsKey(fileName))
            return fileCodes[fileName];
        return string.Empty;
    }
}

<script>
function showCodePanel(fileKey) {
    var panel = document.getElementById('code-panel-' + fileKey);
    if (panel) {
        if (panel.style.display === '' || panel.style.display === 'none') {
            panel.style.display = 'block';
        } else {
            panel.style.display = 'none';
        }
    }
}
</script>

@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@{
    Dictionary<string, List<ReviewSharp.Models.CodeReviewResult>>? resultsByFile = null;
    Dictionary<string, string>? fileCodes = null;
    var resultsByFileJson = HttpContextAccessor?.HttpContext?.Session?.GetString("ResultsByFile");
    var fileCodesJson = HttpContextAccessor?.HttpContext?.Session?.GetString("FileCodes");
    if (!string.IsNullOrEmpty(resultsByFileJson))
    {
        resultsByFile = JsonSerializer.Deserialize<Dictionary<string, List<ReviewSharp.Models.CodeReviewResult>>>(resultsByFileJson) ?? new();
    }
    if (!string.IsNullOrEmpty(fileCodesJson))
    {
        fileCodes = JsonSerializer.Deserialize<Dictionary<string, string>>(fileCodesJson) ?? new();
    }
}
<div class="container-fluid py-4" style="max-width: 1400px; margin:auto;">
    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger">@TempData["Error"]</div>
    }
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="text-primary fw-bold">üìÅ Code Review Results for Folder</h2>
        <a href="@Url.Action("Upload", "CodeReview")" class="btn btn-outline-primary rounded-pill px-4">Upload Another File/Folder</a>
    </div>

    @if (resultsByFile == null || resultsByFile.Count == 0)
    {
        <div class="alert alert-info">No review results found.</div>
    }
    else
    {
    foreach (var kv in resultsByFile)
        {
            var fileKey = kv.Key;
            var panelKey = fileKey.Replace(".", "_").Replace("/", "_");
            var fileResults = kv.Value ?? new List<ReviewSharp.Models.CodeReviewResult>();
            var severityCounts = fileResults.GroupBy(r => string.IsNullOrWhiteSpace(r.Severity) ? "Info" : r.Severity.Trim()).ToDictionary(g => g.Key, g => g.Count());
            <div class="card shadow-lg rounded-4 border-0 mb-5">
                <div class="card-header bg-dark text-white rounded-top-4 d-flex justify-content-between align-items-center">
                    <strong>@fileKey</strong>
                    <span class="badge bg-info px-3 py-2">@fileResults.Count Total</span>
                    <a class="btn btn-outline-primary btn-sm ms-3" href="@Url.Action("ShowFileResult", "CodeReview", new { fileName = fileKey })" target="_blank">Show Code</a>
                </div>
                <div class="card-body p-3">
                    <div id="code-panel-@panelKey" style="display:none;">
                        @{
                            var code = GetFileCode(fileKey, fileCodes ?? new Dictionary<string, string>()) ?? string.Empty;
                            var lines = code.Replace("\r\n", "\n").Split('\n');
                            var commentsByLine = fileResults.Where(r => r.LineNumber.HasValue).GroupBy(r => r.LineNumber.GetValueOrDefault()).ToDictionary(g => g.Key, g => g.ToList());
                        }
                        <div class="card shadow-lg rounded-4 border-0 mb-4" style="background-color:#1e1e1e; color:#f5f5f5;">
                            <div class="card-header" style="background-color:#2c2c2c; color:#f5f5f5; border-top-left-radius:1rem; border-top-right-radius:1rem;">
                                <h5 class="mb-0 fw-semibold">üíª Source Code</h5>
                            </div>
                            <div class="card-body p-0" style="max-height: 80vh; overflow:auto; font-family:Consolas, 'Courier New', monospace;">
                                <table class="table table-sm table-borderless mb-0" style="color:#f5f5f5;">
                                    <thead class="sticky-top" style="background-color:#2c2c2c; color:#f5f5f5;">
                                        <tr>
                                            <th style="width:60px;" class="text-muted small text-end">Line</th>
                                            <th class="text-muted small">Code</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                    @for (int i = 0; i < lines.Length; i++)
                                    {
                                        var lineNumber = i + 1;
                                        var line = lines[i];
                                        <tr>
                                            <td class="text-end text-secondary pe-3 align-top">@lineNumber</td>
                                            <td class="align-top">
                                                @{
                                                    var encoded = System.Net.WebUtility.HtmlEncode(line);
                                                    @Html.Raw(encoded);
                                                    if (commentsByLine.ContainsKey(lineNumber))
                                                    {
                                                        <div class="mt-1">
                                                        @foreach (var comment in commentsByLine[lineNumber])
                                                        {
                                                            var severityColor = comment.Severity switch
                                                            {
                                                                "Error" => "#f75f5f",
                                                                "Warning" => "#f7d35f",
                                                                _ => "#6A9955"
                                                            };
                                                            <div style="font-size:0.8rem; color:@severityColor;">
                                                                @($"{(string.IsNullOrWhiteSpace(comment.Severity) ? "" : comment.Severity + ": ")}{comment.Message}")
                                                            </div>
                                                        }
                                                        </div>
                                                    }
                                                }
                                            </td>
                                        </tr>
                                    }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                    @if (fileResults.Count == 0)
                    {
                        <div class="alert alert-success rounded-3">‚úÖ No issues found. Your code looks clean!</div>
                    }
                    else
                    {
                        <table class="table mb-3" style="background-color: #1e1e1e; color: #f5f5f5; border-radius:8px; overflow:hidden;">
                            <thead style="background-color:#2c2c2c; color:#f5f5f5;">
                                <tr class="small">
                                    <th>Severity</th>
                                    <th class="text-end">Count</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var kv2 in severityCounts.OrderByDescending(kv2 => kv2.Value))
                                {
                                    <tr>
                                        <td>
                                            <span class="badge @(kv2.Key == "Error" ? "bg-danger" : kv2.Key == "Warning" ? "bg-warning text-dark" : "bg-info text-dark")">
                                                @kv2.Key
                                            </span>
                                        </td>
                                        <td class="text-end fw-semibold">@kv2.Value</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        <div style="max-height:55vh; overflow:auto;">
                            <table class="table table-hover table-dark table-sm align-middle">
                                <thead class="sticky-top bg-secondary text-light small">
                                    <tr>
                                        <th style="width:60px;" class="text-end">Line</th>
                                        <th style="width:90px;">Severity</th>
                                        <th style="width:120px;">Rule</th>
                                        <th>Message</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var result in fileResults.OrderBy(r => r.LineNumber ?? int.MaxValue))
                                    {
                                        <tr>
                                            <td class="text-end text-secondary small">@result.LineNumber</td>
                                            <td>
                                                <span class="badge @(result.Severity == "Error" ? "bg-danger" : result.Severity == "Warning" ? "bg-warning text-dark" : "bg-info")">
                                                    @result.Severity
                                                </span>
                                            </td>
                                            <td class="text-light small">@result.RuleName</td>
                                            <td class="text-light">@result.Message</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        }
    }
</div>
