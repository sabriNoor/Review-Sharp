@{
    ViewBag.Title = "Code Review Results";
}
@using ReviewSharp.Models

@{
    var results = ViewBag.Results as List<CodeReviewResult> ?? new List<CodeReviewResult>();
    var code = ViewBag.Code as string ?? string.Empty;
    var lines = code.Replace("\r\n", "\n").Split('\n');
    var commentsByLine = results
        .Where(r => r.LineNumber.HasValue)
        .GroupBy(r => r.LineNumber.GetValueOrDefault())
        .ToDictionary(g => g.Key, g => g.ToList());

    var severityCounts = results
        .GroupBy(r => string.IsNullOrWhiteSpace(r.Severity) ? "Info" : r.Severity.Trim())
        .ToDictionary(g => g.Key, g => g.Count());
}


<button id="darkModeToggle" class="dark-toggle-btn mt-5" aria-pressed="false" style="margin-bottom: 1rem;">🌙 Dark Mode</button>

<style>
    .dark-toggle-btn {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem 1.5rem;
        font-size: 1rem;
        font-weight: 600;
        border: none;
        border-radius: 2rem;
        background: linear-gradient(90deg, #23272b 60%, #3fa9f5 100%);
        color: #e0e0e0;
        box-shadow: 0 2px 8px rgba(0,0,0,0.08);
        cursor: pointer;
        transition: background 0.3s, color 0.3s, box-shadow 0.3s;
        outline: none;
    }
    .dark-toggle-btn:hover, .dark-toggle-btn:focus {
        background: linear-gradient(90deg, #3fa9f5 0%, #23272b 100%);
        color: #fff;
        box-shadow: 0 4px 16px rgba(63,169,245,0.15);
    }
    .dark-mode .dark-toggle-btn {
        background: linear-gradient(90deg, #23272b 60%, #ffd166 100%);
        color: #ffd166;
    }
    .dark-mode .dark-toggle-btn:hover, .dark-mode .dark-toggle-btn:focus {
        background: linear-gradient(90deg, #ffd166 0%, #23272b 100%);
        color: #23272b;
    }

    body.dark-mode {
        background-color: #181a1b !important;
        color: #e0e0e0 !important;
    }
    .dark-mode .card,
    .dark-mode .card-header,
    .dark-mode .card-body {
        background-color: #23272b !important;
        color: #e0e0e0 !important;
    }
    .dark-mode table {
        background-color: #23272b !important;
        color: #e0e0e0 !important;
        border: none !important;
    }
    .dark-mode th, .dark-mode td {
        background-color: #23272b !important;
        color: #e0e0e0 !important;
        border: none !important;
    }
    .dark-mode tr:nth-child(even) {
        background-color: #202225 !important;
    }
    .dark-mode pre, .dark-mode code {
        background: #22272e !important;
        color: #d1d5da !important;
    }
    .dark-mode .badge.bg-danger { background-color: #ff6b6b !important; color: #fff !important; }
    .dark-mode .badge.bg-warning { background-color: #ffd166 !important; color: #222 !important; }
    .dark-mode .badge.bg-info { background-color: #3fa9f5 !important; color: #fff !important; }
    .dark-mode .alert-success { background-color: #223322 !important; color: #b6fcb6 !important; border-color: #2e4d2e !important; }
</style>

<script>
    const toggle = document.getElementById('darkModeToggle');
    function updateToggleState() {
        if (document.body.classList.contains('dark-mode')) {
            toggle.innerHTML = '☀️ Light Mode';
            toggle.setAttribute('aria-pressed', 'true');
        } else {
            toggle.innerHTML = '🌙 Dark Mode';
            toggle.setAttribute('aria-pressed', 'false');
        }
    }
    toggle.addEventListener('click', () => {
        document.body.classList.toggle('dark-mode');
        if (document.body.classList.contains('dark-mode')) {
            localStorage.setItem('darkMode', 'on');
        } else {
            localStorage.setItem('darkMode', 'off');
        }
        updateToggleState();
    });
    if (localStorage.getItem('darkMode') === 'on') {
        document.body.classList.add('dark-mode');
    }
    updateToggleState();
</script>

<div class="container-fluid py-4" style="max-width: 1400px; margin:auto;">

    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="text-primary fw-bold">📊 Code Review Results</h2>
        <a href="@Url.Action("Upload", "CodeReview")" class="btn btn-outline-primary rounded-pill px-4">
            Upload Another File
        </a>
    </div>

    <div class="row g-4">

   <!-- Source Code Panel -->
    <div class="col-lg-7">
        <div class="card shadow-lg rounded-4 border-0" style="background-color:#1e1e1e; color:#f5f5f5;">
            <div class="card-header" style="background-color:#2c2c2c; color:#f5f5f5; border-top-left-radius:1rem; border-top-right-radius:1rem;">
                <h5 class="mb-0 fw-semibold">💻 Source Code</h5>
            </div>
            <div class="card-body p-0" style="max-height: 80vh; overflow:auto; font-family:Consolas, 'Courier New', monospace;">
                <table class="table table-sm table-borderless mb-0" style="color:#f5f5f5;">
                    <thead class="sticky-top" style="background-color:#2c2c2c; color:#f5f5f5;">
                        <tr>
                            <th style="width:60px;" class="text-muted small text-end">Line</th>
                            <th class="text-muted small">Code</th>
                        </tr>
                    </thead>
                    <tbody>
                    @for (int i = 0; i < lines.Length; i++)
                    {
                        var lineNumber = i + 1;
                        var line = lines[i];
                        <tr>
                            <td class="text-end text-secondary pe-3 align-top">@lineNumber</td>
                            <td class="align-top">
                                @{
                                    var encoded = System.Net.WebUtility.HtmlEncode(line);
                                    @Html.Raw(encoded);

                                    if (commentsByLine.ContainsKey(lineNumber))
                                    {
                                        <div class="mt-1">
                                        @foreach (var comment in commentsByLine[lineNumber])
                                        {
                                            var severityColor = comment.Severity switch
                                            {
                                                "Error" => "#f75f5f",
                                                "Warning" => "#f7d35f",
                                                _ => "#6A9955"
                                            };
                                            <div style="font-size:0.8rem; color:@severityColor;">
                                                @($"{(string.IsNullOrWhiteSpace(comment.Severity) ? "" : comment.Severity + ": ")}{comment.Message}")
                                            </div>
                                        }
                                        </div>
                                    }
                                }
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
    </div>


        <!-- Issues Panel -->
        <div class="col-lg-5">
            <div class="card shadow-lg rounded-4 border-0 bg-dark text-light">
                <div class="card-header bg-secondary text-light rounded-top-4 d-flex justify-content-between align-items-center">
                    <h5 class="mb-0 fw-semibold">⚠ Issues</h5>
                    <span class="badge bg-info px-3 py-2">@results.Count Total</span>
                </div>
                <div class="card-body p-3">

                    <!-- Severity Summary -->
                    @if (results.Count > 0)
                    {
                       <table class="table mb-3" style="background-color: #1e1e1e; color: #f5f5f5; border-radius:8px; overflow:hidden;">
                            <thead style="background-color:#2c2c2c; color:#f5f5f5;">
                                <tr class="small">
                                    <th>Severity</th>
                                    <th class="text-end">Count</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var kv in severityCounts.OrderByDescending(kv => kv.Value))
                                {
                                    <tr>
                                        <td>
                                            <span class="badge @(kv.Key == "Error" ? "bg-danger" : kv.Key == "Warning" ? "bg-warning text-dark" : "bg-info text-dark")">
                                                @kv.Key
                                            </span>
                                        </td>
                                        <td class="text-end fw-semibold">@kv.Value</td>
                                    </tr>
                                }
                            </tbody>
                        </table>


                        <!-- Detailed Issues -->
                        <div style="max-height:55vh; overflow:auto;">
                            <table class="table table-hover table-dark table-sm align-middle">
                                <thead class="sticky-top bg-secondary text-light small">
                                    <tr>
                                        <th style="width:60px;" class="text-end">Line</th>
                                        <th style="width:90px;">Severity</th>
                                        <th style="width:120px;">Rule</th>
                <th>Message</th>
            </tr>
        </thead>
        <tbody>
                                    @foreach (var result in results.OrderBy(r => r.LineNumber ?? int.MaxValue))
        {
            <tr>
                                            <td class="text-end text-secondary small">@result.LineNumber</td>
                                            <td>
                                                <span class="badge @(result.Severity == "Error" ? "bg-danger" : result.Severity == "Warning" ? "bg-warning text-dark" : "bg-info")">
                                                    @result.Severity
                                                </span>
                                            </td>
                                            <td class="text-light small">@result.RuleName</td>
                                            <td class="text-light">@result.Message</td>
            </tr>
        }
        </tbody>
    </table>
                        </div>
}
else
{
                        <div class="alert alert-success rounded-3">
                            ✅ No issues found. Your code looks clean!
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>
